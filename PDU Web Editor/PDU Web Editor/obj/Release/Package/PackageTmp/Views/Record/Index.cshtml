@{
    ViewBag.Title = "Record List";
}

@model PDU_Web_Editor.Models.PDU
@using PDU_Web_Editor.Models;

@section Scripts
{

    <script type="text/javascript">
    @*regist client validator to allow select a date >= today for start date and end date of a record*@
        //(function ($, kendo) {
        //    $.extend(true, kendo.ui.validator, {
        //        rules: {
        //            futuredateonly: function (input) {
        //                if (input.is("[data-val-futuredateonly]") && input.val() != "") {
        //                    var date = input.val();

        //                    var today = new Date();
        //                    var dd = today.getDate();
        //                    var mm = today.getMonth() + 1; //January is 0!

        //                    var yyyy = today.getFullYear();
        //                    if (dd < 10) {
        //                        dd = '0' + dd
        //                    }
        //                    if (mm < 10) {
        //                        mm = '0' + mm
        //                    }
        //                    var today = yyyy + '-' + mm + '-' + dd ;

        //                    return date >= today;
        //                }

        //                return true;
        //            }
        //        },
        //        messages: {
        //            futuredateonly: function (input) {
        //                return input.attr("data-val-futuredateonly");
        //            }
        //        }
        //    });
        //})(jQuery, kendo);

        @*regist client validator to disallow start date > end date for a record*@
        (function ($, kendo) {
            $.extend(true, kendo.ui.validator, {
                rules: {
                    greaterdate: function (input) {
                        if (input.is("[data-val-greaterdate]") && input.val() != "") {
                            var date = kendo.parseDate(input.val().toString());
                            earlierDate = kendo.parseDate($("[name='Rec_RecordStartDate']").val().toString())
                            return !date || !earlierDate || earlierDate.getTime() < date.getTime();
                        }

                        return true;
                    }
                },
                messages: {
                    greaterdate: function (input) {
                        return input.attr("data-val-greaterdate");
                    }
                }
            });
        })(jQuery, kendo);
    </script>
}

<div class="content-wrapper">
    <div class="k-block">
        <div class="k-header k-info-colored">
            <span class="setting-title">PDU Record List</span>
            <img class="setting-icon" src="@Url.Content("~/Images/settings-3.png")" alt="setting icon" />
        </div>
        <div class="k-block">
            @using (Html.BeginForm("PDUs_Update", "PDU"))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)   
                <fieldset>
                    <legend>PDU</legend>
                    @Html.HiddenFor(model => model.Pdu_PDUUniqueId)
         
                    <div class="box-col">
                        @Html.LabelFor(model => model.Pdu_FileName)
                        @Html.EditorFor(model => model.Pdu_FileName)
                        @Html.ValidationMessageFor(model => model.Pdu_FileName)
                    </div>

                    <div class="editor-label">
                        @Html.LabelFor(model => model.Pdu_Type)
                    </div>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.Pdu_Type)
                        @Html.ValidationMessageFor(model => model.Pdu_Type)
                    </div>

                    <div class="editor-label">
                        @Html.LabelFor(model => model.Pdu_ScreenSize)
                    </div>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.Pdu_ScreenSize)
                        @Html.ValidationMessageFor(model => model.Pdu_ScreenSize)
                    </div>
                    <p>
                        @(Html.Kendo().Button().Name("iconButton")
                                               .HtmlAttributes( new {type = "submit"} )
                                               .SpriteCssClass("k-icon k-i-refresh")
                                               .Content("Save")
                          )
                        
                    </p>
                </fieldset>
           } 
        </div>

        <div class="k-widget">
            @(Html.Kendo().Grid<Record>() //Bind the grid to 
                          .Name("grid")
                          .Columns(columns =>
                          {
                              // Create a column bound to the Record FileName property
                              columns.Bound(record => record.Rec_RecordName).Title("Name");
                              // Create a column bound to the Record UpdatedByWho property
                              columns.Bound(record => record.Rec_RecordStartDate).Title("Start Date");
                              // Create a column bound to the Record UpdatedOnDate property
                              columns.Bound(record => record.Rec_RecordEndDate).Title("End Date");
                              // Create a column bound to the Record FileLocation property
                              columns.Bound(record => record.Rec_RecordWeight).Title("Weight");
                              // Create a column bound to the Record Asset File property
                              columns.ForeignKey(record => record.Rec_AssetFileName, (System.Collections.IEnumerable)ViewData["assets"],
                              "Ast_FileName", "Ast_FileName").EditorTemplateName("_AssetFileEditor").Title("Asset File");
                              columns.Command(commands =>
                              {
                                  commands.Edit(); // The "edit" command will edit and update data items
                                  commands.Destroy(); // The "destroy" command removes data items
                              }).Title("Commands").Width(200);
                          })
                                  .ToolBar(toolbar => { toolbar.Create(); }) // The "create" command adds new data items
                          .Editable(editable => editable.Mode(GridEditMode.InLine)) // Use inline editing mode
                          .Pageable() // Enable paging
                          .Sortable() // Enable sorting
                          .DataSource(dataSource => dataSource
                                       .Ajax()
                                       .Model(model =>
                                       {
                                           model.Id(record => record.Rec_RecordId); // Specify the property which is the unique identifier of the model
                                           model.Field(record => record.Rec_RecordId).Editable(false); // Make the Asset Id property not editable
                                       })
                                        .Create(create => create.Action("Records_Create", "Record",new { pduId = (int)ViewBag.pduId})) // Action invoked when the user saves a new data item
                                        .Read(read => read.Action("Records_Read", "Record",new { pduId = (int)ViewBag.pduId}))  // Action invoked when the grid needs data
                                        .Update(update => update.Action("Records_Update", "Record",new { pduId = (int)ViewBag.pduId}))  // Action invoked when the user saves an updated data item
                                        .Destroy(destroy => destroy.Action("Records_Delete", "Record")) // Action invoked when the user removes a data item
                                       )       
                           )                       
        </div>

        <div>
            @Html.ActionLink("Back to List", "Index","PDU")
        </div>
    </div>
</div>
